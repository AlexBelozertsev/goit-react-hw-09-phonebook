{"version":3,"sources":["views/RegisterPage.js","components/Title/Title.js","components/Label/Label.js","components/Input/Input.js","components/Form/Form.js","components/Form/Form.module.css"],"names":["RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","alert","text","onSubmit","e","preventDefault","authOperations","register","autoComplete","type","placeholder","onChange","Title","className","Label","htmlFor","children","defaultProps","Input","id","Form","style","module","exports"],"mappings":"2TASe,SAASA,IACtB,IAAMC,EAAWC,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OAEH,YADAC,EAAQO,GAEV,IAAK,QAEH,YADAL,EAASK,GAEX,IAAK,WAEH,YADAH,EAAYG,GAEd,QAEE,YADAC,MAAM,2BAgBZ,OACE,gCACE,cAAC,IAAD,CAAOC,KAAM,iBACb,eAAC,IAAD,CAAMC,SAfW,SAAAC,GACnBA,EAAEC,iBACGb,GAASE,GAAUE,GAIxBP,EAASiB,IAAeC,SAAS,CAAEf,OAAME,QAAOE,cAChDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KANVI,MAAM,0BAYwBO,aAAc,MAA5C,UACE,cAAC,IAAD,CAAOhB,KAAM,QAAb,SACE,cAAC,IAAD,CACEiB,KAAM,OACNjB,KAAM,OACNQ,MAAOR,EACPkB,YAAa,YACbC,SAAUb,MAId,cAAC,IAAD,CAAON,KAAM,UAAb,SACE,cAAC,IAAD,CACEiB,KAAM,QACNjB,KAAM,QACNQ,MAAON,EACPgB,YAAa,gBACbC,SAAUb,MAId,cAAC,IAAD,CAAON,KAAM,YAAb,SACE,cAAC,IAAD,CACEiB,KAAM,WACNjB,KAAM,WACNQ,MAAOJ,EACPc,YAAa,sBACbC,SAAUb,MAId,cAAC,IAAD,CAAQW,KAAM,SAAUP,KAAM,mB,wFCjEvBU,EARD,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACf,OAAO,oBAAIW,UAAU,QAAd,SAAuBX,M,8GCD1BY,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASvB,EAAZ,EAAYA,KAAMwB,EAAlB,EAAkBA,SAAlB,OACZ,wBAAOD,QAASA,EAAhB,UACGvB,EADH,IACUwB,MAIZF,EAAMG,aAAe,CACnBF,QAAS,KACTvB,KAAM,MASOsB,S,yFCjBTI,EAAQ,SAAC,GAAD,IAAGT,EAAH,EAAGA,KAAMjB,EAAT,EAASA,KAAMQ,EAAf,EAAeA,MAAOmB,EAAtB,EAAsBA,GAAIT,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,SAAvC,OACZ,uBACEF,KAAMA,EACNjB,KAAMA,EACNQ,MAAOA,EACPmB,GAAIA,EACJT,YAAaA,EACbC,SAAUA,KAIdO,EAAMD,aAAe,CACnBE,GAAI,KACJT,YAAa,MAYAQ,S,mGCzBTE,EAAO,SAAC,GAAD,IAAGZ,EAAH,EAAGA,aAAcQ,EAAjB,EAAiBA,SAAUb,EAA3B,EAA2BA,SAA3B,OACX,sBAAMK,aAAcA,EAAcK,UAAWQ,IAAMD,KAAMjB,SAAUA,EAAnE,SACGa,KAILI,EAAKH,aAAe,CAClBT,aAAc,MASDY,S,mBCnBfE,EAAOC,QAAU,CAAC,KAAO","file":"static/js/5.676c52aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport Title from '../components/Title';\nimport Form from '../components/Form';\nimport Label from '../components/Label';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\n\nexport default function RegisterView() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        return;\n      case 'email':\n        setEmail(value);\n        return;\n      case 'password':\n        setPassword(value);\n        return;\n      default:\n        alert('Some areas are empty!');\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!name || !email || !password) {\n      alert('Some areas are empty!');\n      return;\n    }\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <Title text={'Registration'} />\n      <Form onSubmit={handleSubmit} autoComplete={'off'}>\n        <Label name={'Name:'}>\n          <Input\n            type={'text'}\n            name={'name'}\n            value={name}\n            placeholder={'Your Name'}\n            onChange={handleChange}\n          />\n        </Label>\n\n        <Label name={'E-mail:'}>\n          <Input\n            type={'email'}\n            name={'email'}\n            value={email}\n            placeholder={'your@mail.com'}\n            onChange={handleChange}\n          />\n        </Label>\n\n        <Label name={'Password:'}>\n          <Input\n            type={'password'}\n            name={'password'}\n            value={password}\n            placeholder={'More than 6 symbols'}\n            onChange={handleChange}\n          />\n        </Label>\n\n        <Button type={'submit'} text={'Signup'} />\n      </Form>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Title.css';\nimport PropTypes from 'prop-types';\n\nconst Title = ({ text }) => {\n  return <h2 className=\"Title\">{text}</h2>;\n};\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import React from 'react';\nimport style from './Label.module.css';\nimport PropTypes from 'prop-types';\n\nconst Label = ({ htmlFor, name, children }) => (\n  <label htmlFor={htmlFor}>\n    {name} {children}\n  </label>\n);\n\nLabel.defaultProps = {\n  htmlFor: null,\n  name: null,\n};\n\nLabel.propTypes = {\n  htmlFor: PropTypes.string,\n  name: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Label;\n","import React from 'react';\nimport style from './Input.module.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ type, name, value, id, placeholder, onChange }) => (\n  <input\n    type={type}\n    name={name}\n    value={value}\n    id={id}\n    placeholder={placeholder}\n    onChange={onChange}\n  />\n);\n\nInput.defaultProps = {\n  id: null,\n  placeholder: null,\n};\n\nInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport style from './Form.module.css';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ autoComplete, children, onSubmit }) => (\n  <form autoComplete={autoComplete} className={style.Form} onSubmit={onSubmit}>\n    {children}\n  </form>\n);\n\nForm.defaultProps = {\n  autoComplete: null,\n};\n\nForm.propTypes = {\n  autoComplete: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__LLFEl\"};"],"sourceRoot":""}